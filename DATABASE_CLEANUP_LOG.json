{
  "cleanup_date": "2024-12-19",
  "summary": {
    "tables_removed": 1,
    "indexes_removed": 45,
    "functions_removed": 80,
    "triggers_removed": 8
  },
  "removed_tables": [
    {
      "table_name": "elrich_daily_reports",
      "reason": "Legacy table replaced by report_capsules architecture",
      "description": "Old daily reports table with 1 live record and many dead tuples",
      "indexes_removed": 25,
      "triggers_removed": 8
    }
  ],
  "removed_indexes": [
    {
      "table": "capsule_templates",
      "indexes": [
        {
          "name": "idx_capsule_templates_capsule_type",
          "reason": "Duplicate of existing capsule_type index",
          "definition": "CREATE INDEX idx_capsule_templates_capsule_type ON public.capsule_templates USING btree (capsule_type)"
        }
      ]
    },
    {
      "table": "elrich_daily_reports",
      "indexes": [
        {
          "name": "elrich_daily_reports_session_id_key",
          "reason": "Constraint index removed with table",
          "definition": "UNIQUE INDEX elrich_daily_reports_session_id_key ON public.elrich_daily_reports USING btree (session_id)"
        },
        {
          "name": "idx_elrich_daily_reports_created_at",
          "reason": "Unused index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_created_at ON public.elrich_daily_reports USING btree (created_at)"
        },
        {
          "name": "idx_elrich_daily_reports_guide_name",
          "reason": "Unused index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_guide_name ON public.elrich_daily_reports USING btree (guide_name)"
        },
        {
          "name": "idx_elrich_daily_reports_operation_name",
          "reason": "Unused index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_operation_name ON public.elrich_daily_reports USING btree (operation_name)"
        },
        {
          "name": "idx_elrich_daily_reports_report_date",
          "reason": "Unused index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_report_date ON public.elrich_daily_reports USING btree (report_date)"
        },
        {
          "name": "idx_elrich_daily_reports_session_id",
          "reason": "Unused index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_session_id ON public.elrich_daily_reports USING btree (session_id)"
        },
        {
          "name": "idx_elrich_daily_reports_tsv",
          "reason": "Unused full-text search index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_tsv ON public.elrich_daily_reports USING gin (tsv)"
        },
        {
          "name": "idx_elrich_daily_reports_embedding",
          "reason": "Unused vector index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_embedding ON public.elrich_daily_reports USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100)"
        },
        {
          "name": "idx_elrich_daily_reports_location",
          "reason": "Unused spatial index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_location ON public.elrich_daily_reports USING gist (location)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_1",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_1 ON public.elrich_daily_reports USING btree (report_date, operation_name)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_2",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_2 ON public.elrich_daily_reports USING btree (guide_name, report_date)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_3",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_3 ON public.elrich_daily_reports USING btree (session_id, created_at)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_4",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_4 ON public.elrich_daily_reports USING btree (operation_name, guide_name, report_date)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_5",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_5 ON public.elrich_daily_reports USING btree (session_id, operation_name, report_date)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_6",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_6 ON public.elrich_daily_reports USING btree (guide_name, operation_name, created_at)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_7",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_7 ON public.elrich_daily_reports USING btree (report_date, guide_name, operation_name, session_id)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_8",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_8 ON public.elrich_daily_reports USING btree (created_at, report_date, operation_name)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_9",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_9 ON public.elrich_daily_reports USING btree (session_id, guide_name, created_at)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_10",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_10 ON public.elrich_daily_reports USING btree (operation_name, created_at, report_date)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_11",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_11 ON public.elrich_daily_reports USING btree (guide_name, session_id, operation_name)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_12",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_12 ON public.elrich_daily_reports USING btree (report_date, session_id, guide_name)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_13",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_13 ON public.elrich_daily_reports USING btree (created_at, operation_name, guide_name)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_14",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_14 ON public.elrich_daily_reports USING btree (session_id, report_date, created_at)"
        },
        {
          "name": "idx_elrich_daily_reports_composite_15",
          "reason": "Unused composite index (0 reads)",
          "definition": "CREATE INDEX idx_elrich_daily_reports_composite_15 ON public.elrich_daily_reports USING btree (operation_name, session_id, report_date, guide_name)"
        }
      ]
    },
    {
      "table": "infoex_reports",
      "indexes": [
        {
          "name": "idx_infoex_reports_embedding_duplicate",
          "reason": "Duplicate embedding index",
          "definition": "CREATE INDEX idx_infoex_reports_embedding_duplicate ON public.infoex_reports USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100)"
        },
        {
          "name": "idx_infoex_reports_zone_name_duplicate",
          "reason": "Duplicate zone_name index",
          "definition": "CREATE INDEX idx_infoex_reports_zone_name_duplicate ON public.infoex_reports USING btree (zone_name)"
        }
      ]
    },
    {
      "table": "infoex_user_location_reports",
      "indexes": [
        {
          "name": "idx_infoex_user_location_reports_duplicate",
          "reason": "Duplicate index on same columns",
          "definition": "CREATE INDEX idx_infoex_user_location_reports_duplicate ON public.infoex_user_location_reports USING btree (user_id, location_id)"
        }
      ]
    },
    {
      "table": "min_alerts",
      "indexes": [
        {
          "name": "idx_min_alerts_alert_time_duplicate_1",
          "reason": "Duplicate alert_time index",
          "definition": "CREATE INDEX idx_min_alerts_alert_time_duplicate_1 ON public.min_alerts USING btree (alert_time)"
        },
        {
          "name": "idx_min_alerts_alert_time_duplicate_2",
          "reason": "Duplicate alert_time index",
          "definition": "CREATE INDEX idx_min_alerts_alert_time_duplicate_2 ON public.min_alerts USING btree (alert_time)"
        }
      ]
    }
  ],
  "removed_functions": [
    {
      "category": "Legacy Aurora Functions",
      "functions": [
        {
          "name": "extract_safety_fields_from_aurora_json",
          "reason": "Legacy function for old Aurora JSON structure",
          "return_type": "jsonb"
        },
        {
          "name": "update_daily_reports_tsv",
          "reason": "Legacy function for old daily reports table",
          "return_type": "trigger"
        },
        {
          "name": "generate_daily_report_uuid",
          "reason": "Legacy UUID generation for old table structure",
          "return_type": "uuid",
          "arguments": "text, date, uuid"
        }
      ]
    },
    {
      "category": "Legacy Capsule Functions",
      "functions": [
        {
          "name": "get_capsule_bundle",
          "reason": "Legacy capsule retrieval function",
          "return_type": "jsonb",
          "arguments": "text[]"
        },
        {
          "name": "get_capsules",
          "reason": "Legacy capsule retrieval function",
          "return_type": "jsonb",
          "arguments": "text[]"
        },
        {
          "name": "get_next_capsule_with_inheritance",
          "reason": "Legacy inheritance function (replaced by new architecture)",
          "return_type": "jsonb",
          "arguments": "uuid"
        },
        {
          "name": "get_static_context",
          "reason": "Legacy static context function",
          "return_type": "jsonb"
        },
        {
          "name": "get_static_context_key",
          "reason": "Legacy static context key function",
          "return_type": "text"
        },
        {
          "name": "get_static_prompt",
          "reason": "Legacy static prompt function",
          "return_type": "text"
        },
        {
          "name": "get_static_prompt_bundle",
          "reason": "Legacy static prompt bundle function",
          "return_type": "jsonb"
        }
      ]
    },
    {
      "category": "Legacy GORC Functions",
      "functions": [
        {
          "name": "gorc_avobs_upsert",
          "reason": "Legacy avalanche observation upsert",
          "return_type": "void",
          "arguments": "uuid, jsonb"
        },
        {
          "name": "gorc_avproblems_upsert",
          "reason": "Legacy avalanche problems upsert",
          "return_type": "void",
          "arguments": "uuid, jsonb"
        },
        {
          "name": "gorc_capsule_gaps",
          "reason": "Legacy capsule gap detection",
          "return_type": "jsonb",
          "arguments": "uuid"
        },
        {
          "name": "gorc_compute_likelihood",
          "reason": "Legacy likelihood computation",
          "return_type": "text",
          "arguments": "text, text"
        },
        {
          "name": "gorc_get_capsules_text",
          "reason": "Legacy capsule text retrieval",
          "return_type": "text",
          "arguments": "text[]"
        },
        {
          "name": "gorc_hazard_upsert",
          "reason": "Legacy hazard upsert",
          "return_type": "void",
          "arguments": "uuid, jsonb"
        },
        {
          "name": "gorc_numeric_array_between",
          "reason": "Legacy numeric array utility",
          "return_type": "boolean",
          "arguments": "numeric[], numeric, numeric"
        },
        {
          "name": "gorc_render_markdown",
          "reason": "Legacy markdown rendering",
          "return_type": "text",
          "arguments": "uuid"
        },
        {
          "name": "gorc_snow_upsert",
          "reason": "Legacy snow upsert",
          "return_type": "void",
          "arguments": "uuid, jsonb"
        },
        {
          "name": "gorc_terrain_upsert",
          "reason": "Legacy terrain upsert",
          "return_type": "void",
          "arguments": "uuid, jsonb"
        },
        {
          "name": "gorc_weather_upsert",
          "reason": "Legacy weather upsert",
          "return_type": "void",
          "arguments": "uuid, jsonb"
        }
      ]
    },
    {
      "category": "Legacy Search Functions",
      "functions": [
        {
          "name": "hybrid_search_fast",
          "reason": "Legacy hybrid search function",
          "return_type": "TABLE(uuid uuid, rank real)",
          "arguments": "date, date, text, vector, text, integer"
        },
        {
          "name": "match_documents",
          "reason": "Legacy document matching",
          "return_type": "TABLE(uuid uuid, rank real)",
          "arguments": "vector, integer, jsonb"
        },
        {
          "name": "match_emails",
          "reason": "Legacy email matching",
          "return_type": "TABLE(uuid uuid, rank real)",
          "arguments": "jsonb, integer, vector"
        },
        {
          "name": "match_infoex",
          "reason": "Legacy InfoEx matching",
          "return_type": "TABLE(uuid uuid, rank real)",
          "arguments": "vector, integer, jsonb"
        },
        {
          "name": "match_reports",
          "reason": "Legacy report matching",
          "return_type": "TABLE(uuid uuid, rank real)",
          "arguments": "vector, integer, jsonb"
        }
      ]
    },
    {
      "category": "Legacy Utility Functions",
      "functions": [
        {
          "name": "join_nonempty",
          "reason": "Legacy string utility function",
          "return_type": "text",
          "arguments": "text[], text"
        },
        {
          "name": "jtxt",
          "reason": "Legacy JSON text extraction",
          "return_type": "text",
          "arguments": "jsonb, text"
        },
        {
          "name": "normalize_avy_activity",
          "reason": "Legacy avalanche activity normalization",
          "return_type": "trigger"
        },
        {
          "name": "normalize_avy_activity_label",
          "reason": "Legacy avalanche activity label normalization",
          "return_type": "text",
          "arguments": "text"
        },
        {
          "name": "normalize_email",
          "reason": "Legacy email normalization",
          "return_type": "trigger"
        },
        {
          "name": "populate_doc_fields_from_metadata",
          "reason": "Legacy document field population",
          "return_type": "trigger"
        },
        {
          "name": "populate_rag_reports_columns",
          "reason": "Legacy RAG column population",
          "return_type": "trigger"
        },
        {
          "name": "quarterly_index_update",
          "reason": "Legacy quarterly index update",
          "return_type": "void"
        },
        {
          "name": "refresh_recent_reports_mv",
          "reason": "Legacy materialized view refresh",
          "return_type": "void"
        },
        {
          "name": "render_markdown_from_slots",
          "reason": "Legacy markdown rendering from slots",
          "return_type": "text",
          "arguments": "jsonb"
        }
      ]
    },
    {
      "category": "Legacy Submission Functions",
      "functions": [
        {
          "name": "submit_all_capsules_to_infoex",
          "reason": "Legacy bulk submission function",
          "return_type": "jsonb",
          "arguments": "uuid"
        },
        {
          "name": "submit_capsule_to_infoex",
          "reason": "Legacy individual capsule submission",
          "return_type": "jsonb",
          "arguments": "uuid"
        }
      ]
    },
    {
      "category": "Legacy Sync Functions",
      "functions": [
        {
          "name": "sync_avalanche_summary_from_slots",
          "reason": "Legacy avalanche summary sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_avobs_from_slots",
          "reason": "Legacy avalanche observations sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_avproblems_from_slots",
          "reason": "Legacy avalanche problems sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_centroid_from_geometry",
          "reason": "Legacy centroid sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_hazard_from_slots",
          "reason": "Legacy hazard sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_metadata_from_slots",
          "reason": "Legacy metadata sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_snow_from_slots",
          "reason": "Legacy snow sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_snowpack_summary_from_slots",
          "reason": "Legacy snowpack summary sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_terrain_from_slots",
          "reason": "Legacy terrain sync",
          "return_type": "trigger"
        },
        {
          "name": "sync_weather_from_slots",
          "reason": "Legacy weather sync",
          "return_type": "trigger"
        }
      ]
    },
    {
      "category": "Legacy Update Functions",
      "functions": [
        {
          "name": "update_capsule_field",
          "reason": "Legacy capsule field update (replaced by new function)",
          "return_type": "jsonb",
          "arguments": "uuid, text, jsonb"
        },
        {
          "name": "update_capsule_infoex_response",
          "reason": "Legacy InfoEx response update",
          "return_type": "void",
          "arguments": "uuid, text, text, jsonb"
        },
        {
          "name": "update_capsules_tsv",
          "reason": "Legacy TSV update for capsules",
          "return_type": "trigger"
        },
        {
          "name": "update_email_rag_fields_from_metadata",
          "reason": "Legacy email RAG field update",
          "return_type": "trigger"
        },
        {
          "name": "upsert_capsule",
          "reason": "Legacy capsule upsert function",
          "return_type": "uuid",
          "arguments": "text, text, text, text, jsonb, jsonb, jsonb, boolean"
        }
      ]
    },
    {
      "category": "Legacy Validation Functions",
      "functions": [
        {
          "name": "validate_avalanche_summary_capsule",
          "reason": "Legacy avalanche summary validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_avobs_capsule",
          "reason": "Legacy avalanche observations validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_avproblems_capsule",
          "reason": "Legacy avalanche problems validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_capsule",
          "reason": "Legacy generic capsule validation",
          "return_type": "jsonb",
          "arguments": "text, jsonb"
        },
        {
          "name": "validate_capsule_mux",
          "reason": "Legacy capsule validation multiplexer",
          "return_type": "jsonb",
          "arguments": "text, jsonb"
        },
        {
          "name": "validate_expectations_capsule",
          "reason": "Legacy expectations validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_hazard_capsule",
          "reason": "Legacy hazard validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_metadata_capsule",
          "reason": "Legacy metadata validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_narrative_capsule",
          "reason": "Legacy narrative validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_other_hazards_capsule",
          "reason": "Legacy other hazards validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_slots",
          "reason": "Legacy slots validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_snow_capsule",
          "reason": "Legacy snow validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_snowpack_summary_capsule",
          "reason": "Legacy snowpack summary validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_terrain_capsule",
          "reason": "Legacy terrain validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        },
        {
          "name": "validate_weather_capsule",
          "reason": "Legacy weather validation",
          "return_type": "jsonb",
          "arguments": "jsonb"
        }
      ]
    }
  ],
  "removed_triggers": [
    {
      "table": "elrich_daily_reports",
      "triggers": [
        {
          "name": "elrich_daily_reports_tsv_update",
          "reason": "Legacy TSV update trigger",
          "function": "update_daily_reports_tsv"
        },
        {
          "name": "elrich_daily_reports_embedding_update",
          "reason": "Legacy embedding update trigger",
          "function": "update_daily_reports_tsv"
        },
        {
          "name": "elrich_daily_reports_location_update",
          "reason": "Legacy location update trigger",
          "function": "update_daily_reports_tsv"
        },
        {
          "name": "elrich_daily_reports_metadata_update",
          "reason": "Legacy metadata update trigger",
          "function": "update_daily_reports_tsv"
        },
        {
          "name": "elrich_daily_reports_weather_update",
          "reason": "Legacy weather update trigger",
          "function": "update_daily_reports_tsv"
        },
        {
          "name": "elrich_daily_reports_snow_update",
          "reason": "Legacy snow update trigger",
          "function": "update_daily_reports_tsv"
        },
        {
          "name": "elrich_daily_reports_hazard_update",
          "reason": "Legacy hazard update trigger",
          "function": "update_daily_reports_tsv"
        },
        {
          "name": "elrich_daily_reports_terrain_update",
          "reason": "Legacy terrain update trigger",
          "function": "update_daily_reports_tsv"
        }
      ]
    }
  ],
  "benefits_achieved": {
    "performance": "Removed unused indexes = faster writes, less maintenance overhead",
    "storage": "Significant space savings from removed legacy data and indexes",
    "maintainability": "Cleaner schema, easier to understand and maintain",
    "reliability": "Removed potential points of failure from legacy code",
    "focus": "Database now focused on current capsule architecture"
  },
  "notes": {
    "preserved_functions": "Kept essential PostGIS, TimescaleDB, and new capsule architecture functions",
    "preserved_indexes": "Kept essential primary keys, unique constraints, and active indexes",
    "preserved_tables": "Kept all active tables including capsule_templates, report_capsules, and supporting tables",
    "migration_path": "All removed functions have been replaced by new capsule architecture functions"
  }
}
